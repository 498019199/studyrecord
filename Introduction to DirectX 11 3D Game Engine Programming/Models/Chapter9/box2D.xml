<?xml version='1.0'?>
<effect>
    <parameter type="texture2D" name="src1_tex"/>
	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
        <state name="address_w" value="wrap"/>
	</parameter>
    <cbuffer name="VSConstantBuffer">
        <parameter type="float4x4" name="gWorld"/>
        <parameter type="float4x4" name="gView"/>
        <parameter type="float4x4" name="gProj"/>
        <parameter type="float4x4" name="gWorldInvTranspose"/>
    </cbuffer>
    
    <technique name="Basic_2D">
        <pass name="p0">
            <state name="cull_mode" value="back"/>
            <state name="vertex_shader" value="VS()"/>
			<state name="pixel_shader" value="PS()"/>
        </pass>
    </technique>
    
    <technique name="mirror">
        <pass name="p0">
            <state name="cull_mode" value="none"/>

            <state name="depth_enable" value="false"/>
            <state name="front_stencil_enable" value="true"/>

            <state name="front_stencil_fail" value="replace"/>
            <state name="front_stencil_depth_fail" value="replace"/>
            <state name="front_stencil_pass" value="replace"/>
            <state name="front_stencil_func" value="always_pass"/>
            <state name="back_stencil_fail" value="replace"/>
            <state name="back_stencil_depth_fail" value="replace"/>
            <state name="back_stencil_pass" value="replace"/>
            <state name="back_stencil_func" value="always_pass"/>
            
            <state name="vertex_shader" value="VS()"/>
			<state name="pixel_shader" value="PS()"/>
        </pass>
    </technique>
    <shader>
	        		<![CDATA[
struct VertexPosHTex
{
    float4 posH : SV_POSITION;
    float3 posW : POSITION;     // 在世界中的位置
    float3 normalW : NORMAL;    // 法向量在世界中的方向
    float2 tex : TEXCOORD;
};

struct VertexPosTex
{
    float3 posL : POSITION;
    float3 normalL : NORMAL;
    float2 tex : TEXCOORD;
};

// 顶点着色器(2D)
VertexPosHTex VS(VertexPosTex vIn)
{
    VertexPosHTex vOut;
    matrix viewProj = mul(gView, gProj);
    float4 posW = mul(float4(vIn.posL, 1.0f), gWorld);

    vOut.posH = mul(posW, viewProj);
    vOut.posW = posW.xyz;
    vOut.normalW = mul(vIn.normalL, (float3x3) gWorldInvTranspose);
    vOut.tex = vIn.tex;
    return vOut;
}

// 像素着色器(2D)
float4 PS(VertexPosHTex pIn) : SV_Target
{
    return src1_tex.Sample(point_sampler, pIn.tex);
}
					            		]]>
	</shader>
</effect>